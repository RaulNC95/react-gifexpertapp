{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAqB9C,OACI,oCAEI,0BAAMC,SAfO,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,OAUV,2BACIO,KAAO,OACPC,MAAUT,EACVU,SAxBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,yFAE4EC,UAAWH,GAFvF,sBAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAQF,EAAIE,MAEZV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAoBZM,GApBY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAvBJ,GAAwB,IAAnBC,EAAkB,EAAlBA,MAAQV,EAAU,EAAVA,IACvC,OACI,yBAAKc,UAAY,8CACb,yBAAKC,IAAOf,EAAKgB,IAAON,IACxB,2BAAKA,KCAJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA8BxC,OAtBAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAGHH,EAAS,CACLf,KAAOkB,EACPL,SAAS,SAMtB,CAAEpB,IASEqB,EDpB4BK,CAAc1B,GAAnCa,EAPuB,EAO7BN,KAAea,EAPc,EAOdA,QAGvB,OACI,oCACI,wBAAIJ,UAAY,qCAAhB,IAAuDhB,EAAvD,KAGEoB,GAAW,uBAAGJ,UAAY,oCAAf,WAEb,yBAAKA,UAAY,aAMTH,EAAOJ,KAAK,SAACC,GAAD,OACJ,kBAAC,EAAD,eACIiB,IAAQjB,EAAIC,IAIPD,UE/BxBkB,EAAe,WAAM,MAKM1C,mBAAS,CAAC,cALhB,mBAKvB2C,EALuB,KAKX5C,EALW,KAe9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAIA,4BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OAKnB,kBAAC,EAAD,CACI2B,IAAQ3B,EACRA,SAAaA,U,MC7BzC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.11115033.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    \r\n    //El inputValue es el valor por defecto (Hola Mundo)\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //Para eliminar el intro\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            \r\n            setCategories(categorias => [inputValue,...categorias]);\r\n            setInputValue('')\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Con el form por defecto al hacer click hace un refresh del navegador. El onSubmit es cuando le das al intro */}\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <input \r\n                    type = \"text\"\r\n                    value = { inputValue }\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","//Postman te crea la url\r\n//Utilizamos el postman con un nuevo request get con la sintexis de endpoint search y el api_key = 'el api key'\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=Vtx27CV4Lia6MJFNvGKYST1TFX9Lw65A&q=${ encodeURI (category)}&limit=10`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id : img.id,\r\n            title : img.title,\r\n            //Si pone la interrogacion es para preguntar si hay alguna imagen que no tiene esa propiedad que no casque\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    //console.log(gifs);\r\n\r\n    //Para cargar las imagenes\r\n    //setImages( gifs );\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id , title , url }) => {\r\n    return (\r\n        <div className = \"card animate__animated animate__backInLeft\">\r\n            <img src = {url} alt = {title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","//Coleccion de todos los elementos\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n/* import React, { useState, useEffect } from 'react' */\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    //const [count, setCount] = useState(0);\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n\r\n    const { data: images , loading } = useFetchGifs( category );\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3 className = \"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            {/* Este tipo de ternario dice que si esta cargando, mostrar el parrafo, y si es falso que no muestre nada */}\r\n            { loading && <p className = \"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className = \"card-grid\">\r\n\r\n                {/* <h3>{ count }</h3>\r\n                <button onClick = { () => setCount( count + 1)}></button> */}\r\n\r\n                {\r\n                    images.map( (img) => (\r\n                            <GifGridItem \r\n                                key = { img.id }\r\n                                //De esta manera habria que recibirlo en el componente con un props.img para abrir las propiedades\r\n                                //img = { img }\r\n                                //Otra forma de hacer lo de arriba. De esta manera manda cada una de las propiedades del objeto como una propiedad independiente\r\n                                { ...img }\r\n                            />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState , useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n    //El useEfect es una especie de condicional que hace que se renderice el componente una unica vez. Sin el cada vez que damos al boton, react recargaria de nuevo la pagina y con ello la peticion. Seria un bucle infinito\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                //console.log(imgs);\r\n                setState({\r\n                    data : imgs,\r\n                    loading: false\r\n                });\r\n\r\n\r\n            });\r\n        // Con el [] ya no se disparara la peticion cada vez. Si metemos dentro del array categoria es para que cada vez que cambie la categoria, que lance la peticion http\r\n    }, [ category ]);\r\n\r\n\r\n    /* setTimeout( () => {\r\n        setState({\r\n            data : [1,2,3,4,5,6,7,8],\r\n            loading : false})\r\n    },3000); */\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //Asi no porque la constante seria inmutable y react no renderizaria de nuevo si este cambiase\r\n    //const categories = ['One Punch','Samurai','Dragon Ball']\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //Se haria asi\r\n    /* const handleAdd = () => {\r\n\r\n        //Para aÃ±adir un nuevo elemento sin cargarnos el array anterior\r\n        setCategories(categorias => [...categorias,'Zombies']);\r\n\r\n    }; */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr />\r\n\r\n            {/* <button onClick = {handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                { \r\n                    categories.map(category => \r\n                        //Para el AddCategory\r\n                        //return <li key = { category }>{ category }</li>\r\n\r\n                        //Para el GifGrid\r\n                        <GifGrid \r\n                            key = { category } \r\n                            category = { category } \r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp'\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}